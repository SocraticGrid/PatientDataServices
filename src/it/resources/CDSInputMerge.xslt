<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns0="org.opencds.vmr.v1_0.schema.cdsinput" exclude-result-prefixes="xs fn ns0">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:param name="cdsInput10" select="'medications'"/>
	<xsl:param name="cdsInput2" select="'procedures'"/>
	<xsl:param name="cdsInput3" select="'problems'"/>
	<xsl:param name="cdsInput6" select="'vitals'"/>
	<xsl:param name="cdsInput7" select="'labs'"/>
	<xsl:param name="cdsInput8" select="'education'"/>
	<xsl:param name="cdsInput9" select="'healthfactors'"/>
	<xsl:template match="/">
		<xsl:variable name="var1_cdsInput" as="node()*" select="ns0:cdsInput"/>
		<cdsInput xmlns="org.opencds.vmr.v1_0.schema.cdsinput" xmlns:dt="org.opencds.vmr.v1_0.schema.datatypes" xmlns:vmr="org.opencds.vmr.v1_0.schema.vmr">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'org.opencds.vmr.v1_0.schema.cdsinput C:/Users/JERRYG~1/Dropbox/Cognitive/MAPFOR~1/OPENCD~1/cdsInput.xsd'"/>
			<xsl:for-each select="$var1_cdsInput/*:templateId[fn:namespace-uri() eq '']">
				<templateId xmlns="">
					<xsl:sequence select="(./@node(), ./node())"/>
				</templateId>
			</xsl:for-each>
			<vmrInput xmlns="">
				<xsl:for-each select="$var1_cdsInput/vmrInput/templateId">
					<templateId>
						<xsl:sequence select="(./@node(), ./node())"/>
					</templateId>
				</xsl:for-each>
				<patient>
					<xsl:for-each select="$var1_cdsInput/vmrInput/patient/templateId">
						<templateId>
							<xsl:sequence select="(./@node(), ./node())"/>
						</templateId>
					</xsl:for-each>
					<xsl:for-each select="$var1_cdsInput/vmrInput/patient/id">
						<id>
							<xsl:sequence select="(./@node(), ./node())"/>
						</id>
					</xsl:for-each>
					<xsl:for-each select="$var1_cdsInput/vmrInput/patient/entityType">
						<entityType>
							<xsl:sequence select="(./@node(), ./node())"/>
						</entityType>
					</xsl:for-each>
					<xsl:for-each select="$var1_cdsInput/vmrInput/patient/demographics">
						<demographics>
							<xsl:sequence select="(./@node(), ./node())"/>
						</demographics>
					</xsl:for-each>
					<clinicalStatements>
						<observationResults>
							<xsl:for-each select="fn:doc($cdsInput6)/ns0:cdsInput">
								<xsl:variable name="var2_vmrInput" as="node()*" select="vmrInput"/>
								<xsl:for-each select="$var2_vmrInput">
									<xsl:variable name="var3_patient" as="node()*" select="patient"/>
									<xsl:for-each select="$var3_patient">
										<xsl:variable name="var4_clinicalStatements" as="node()*" select="clinicalStatements"/>
										<xsl:for-each select="$var4_clinicalStatements">
											<xsl:variable name="var5_observationResults" as="node()*" select="observationResults"/>
											<xsl:for-each select="$var5_observationResults">
												<xsl:variable name="var6_observationResult" as="node()*" select="observationResult"/>
												<xsl:for-each select="$var6_observationResult">
													<xsl:variable name="var7_val" as="node()*" select="(./@node(), ./node())"/>
													<observationResult>
														<xsl:sequence select="$var7_val"/>
													</observationResult>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="fn:doc($cdsInput7)/ns0:cdsInput">
								<xsl:variable name="var8_vmrInput" as="node()*" select="vmrInput"/>
								<xsl:for-each select="$var8_vmrInput">
									<xsl:variable name="var9_patient" as="node()*" select="patient"/>
									<xsl:for-each select="$var9_patient">
										<xsl:variable name="var10_clinicalStatements" as="node()*" select="clinicalStatements"/>
										<xsl:for-each select="$var10_clinicalStatements">
											<xsl:variable name="var11_observationResults" as="node()*" select="observationResults"/>
											<xsl:for-each select="$var11_observationResults">
												<xsl:variable name="var12_observationResult" as="node()*" select="observationResult"/>
												<xsl:for-each select="$var12_observationResult">
													<xsl:variable name="var13_val" as="node()*" select="(./@node(), ./node())"/>
													<observationResult>
														<xsl:sequence select="$var13_val"/>
													</observationResult>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="fn:doc($cdsInput9)/ns0:cdsInput">
								<xsl:variable name="var14_vmrInput" as="node()*" select="vmrInput"/>
								<xsl:for-each select="$var14_vmrInput">
									<xsl:variable name="var15_patient" as="node()*" select="patient"/>
									<xsl:for-each select="$var15_patient">
										<xsl:variable name="var16_clinicalStatements" as="node()*" select="clinicalStatements"/>
										<xsl:for-each select="$var16_clinicalStatements">
											<xsl:variable name="var17_observationResults" as="node()*" select="observationResults"/>
											<xsl:for-each select="$var17_observationResults">
												<xsl:variable name="var18_observationResult" as="node()*" select="observationResult"/>
												<xsl:for-each select="$var18_observationResult">
													<xsl:variable name="var19_val" as="node()*" select="(./@node(), ./node())"/>
													<observationResult>
														<xsl:sequence select="$var19_val"/>
													</observationResult>
												</xsl:for-each>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</observationResults>
						<problems>
							<xsl:for-each select="fn:doc($cdsInput3)/ns0:cdsInput/vmrInput/patient/clinicalStatements/problems/problem">
								<problem>
									<xsl:sequence select="(./@node(), ./node())"/>
								</problem>
							</xsl:for-each>
						</problems>
						<xsl:for-each select="fn:doc($cdsInput2)/ns0:cdsInput/vmrInput/patient/clinicalStatements/procedureEvents">
							<procedureEvents>
								<xsl:for-each select="procedureEvent">
									<procedureEvent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</procedureEvent>
								</xsl:for-each>
								<xsl:for-each select="fn:doc($cdsInput8)/ns0:cdsInput/vmrInput/patient/clinicalStatements/procedureEvents/procedureEvent">
									<procedureEvent>
										<xsl:sequence select="(./@node(), ./node())"/>
									</procedureEvent>
								</xsl:for-each>
							</procedureEvents>
						</xsl:for-each>
						<substanceAdministrationOrders>
							<xsl:for-each select="fn:doc($cdsInput10)/ns0:cdsInput/vmrInput/patient/clinicalStatements/substanceAdministrationOrders/substanceAdministrationOrder">
								<substanceAdministrationOrder>
									<xsl:sequence select="(./@node(), ./node())"/>
								</substanceAdministrationOrder>
							</xsl:for-each>
						</substanceAdministrationOrders>
					</clinicalStatements>
				</patient>
			</vmrInput>
		</cdsInput>
	</xsl:template>
</xsl:stylesheet>
